#pragma once
#include <cstdint>
#include <fstream>
#include <string>
#include <stack>

typedef uint_least8_t u8;
typedef uint_least16_t u16;

class Chip8
{
public:
	Chip8();
	u8 keys[16];
	u8 screen[64 * 32];
	bool drawFlag;
	bool paused;
	void emulateCycles(int cycles);
	bool loadRom(const char* fileName);
	void reset();

private:
	u16 pc;
	u16 iReg; // Address register
	u8 V[16]; // V[15] is carry flag
	std::stack<u16> SP[16];
	u8 mem[4096];
	u8 fontset[80] =
	{
		0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
		0x20, 0x60, 0x20, 0x20, 0x70, // 1
		0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
		0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
		0x90, 0x90, 0xF0, 0x10, 0x10, // 4
		0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
		0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
		0xF0, 0x10, 0x20, 0x40, 0x40, // 7
		0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
		0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
		0xF0, 0x90, 0xF0, 0x90, 0x90, // A
		0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
		0xF0, 0x80, 0x80, 0x80, 0xF0, // C
		0xE0, 0x90, 0x90, 0x90, 0xE0, // D
		0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
		0xF0, 0x80, 0xF0, 0x80, 0x80  // F
	};
	u8 soundTimer;
	u8 delayTimer;

	void executeOpcode();
	void updateTimers();

	// Extract x or y from opcode
	u8 getRegister(u16 opcode, int xy)
	{
		if (xy == 0)
			return (opcode >> 8) & 0x000F;
		else
			return (opcode >> 4) & 0x000F;
	}

};

